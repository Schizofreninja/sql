Это моя личная шпаргалка по SQL, которая помогает в решении задач и чтении кода. Очень полезная вещь.
  
  Общая структура запроса выглядит следующим образом:
SELECT ('столбцы или * для выбора всех столбцов; обязательно')
FROM ('таблица; обязательно')
WHERE ('условие/фильтрация, например, city = 'Moscow'; необязательно')
GROUP BY ('столбец, по которому хотим сгруппировать данные; необязательно')
HAVING ('условие/фильтрация на уровне сгруппированных данных; необязательно')
ORDER BY ('столбец, по которому хотим отсортировать вывод; необязательно')
______________________________________________________
\n - новая строка
UPPER - верхний регистр
LOWER - нижний регистр
LENGTH - длина строки
INSTR - с какого по счёту места начинается символ
NOW() – дата
YEAR – год
LEFT (' __ ', 3) - вывод символов слева
RIGHT (' __ ', 3) -  вывод символов справа
_______________________________________________________
Операторы: 
DISTINCT - удаление дублей (похожие UNION)
INTERSECT - Комбинирует два запроса SELECT, но возвращает записи только первого SELECT, которые имеют совпадения во втором элементе SELECT.
EXCEPT - Комбинирует два запроса SELECT, но возвращает записи только первого SELECT, которые не имеют совпадения во втором элементе SELECT.
UNION ALL - объединяет два результата в один без удаления дублей
WHERE – условие
AND - логическое умножение
OR - логическое сложение
NOT - изменение на противоположность
IS NULL - узнать, равно ли проверяемое значение NULL
(WHERE middle_name IS NULL или IS NOT NULL)
BETWEEN - узнать, равно ли проверяемое значение заданному промежутку
(WHERE unit_price BETWEEN 100 AND 500)
IN - узнать, входит ли проверяемое значение столбца в список указанных значений
(WHERE YEAR(birthday) IN (2000, 2002, 2004))
LIKE - узнать, соответствует ли строка определённому шаблону
(WHERE email LIKE '%@hotmail.%'), где % - любая последовательность, а _ любой единичный символ
- text% любым строкам, начинающимся на «text»
- %text любым строкам, заканчивающимся на «text»
- _ext строкам, имеющим длину 4 символа, при этом 3 последних обязательно должны быть «ext»
- begin%end строкам, начинающихся на «begin» и заканчивающихся на «end»
ESCAPE - для отделения специальных символов (%, \)
(WHERE progress LIKE '3!%' ESCAPE '!')
REGEXP (или RLIKE) - для поиска и обработки строковых данных с помощью регулярных выражений (создаёт шаблон действий)
ORDER BY - используется для упорядочивания записей
ORDER BY столбец_1 [ASC | DESC][, столбец_n [ASC | DESC]], где
ASC и DESC - направление сортировки. ASC - сортировка по возрастанию (по умолчанию), DESC - сортировка по убыванию
GROUP BY - объединение данных в уникальные группы
HAVING - для фильтрации групп
JOIN - соединить таблицы (по умолчанию внутреннее)
INNER JOIN - внутреннее соединение. Также для внутреннего соединения таблиц подойдёт оператор WHERE
OUTER JOIN - внешнее соединение (LEFT, RIGHT, FULL(по умолч))
LIMIT - извлекает определённый диапазон записей из одной или нескольких таблиц, где [1, 2] 1-какой отступ в таблице, 2 - какое к-во строк с этого отступа вывести
CASE - оператор условной логики. Пример:
CASE    WHEN условие_1 THEN возвращаемое_значение_1
ELSE возвращаемое_значение_по_умолчанию       END
________________________________________________________
INSERT INTO - добавляет новые данные в таблицу
SELECT 20, 'Table', 2; или VALUES (20, 'Table', 2);
(MySQL) AUTO_INCREMENT - для автоматической генерации индекса при добавлении данных
(PostgreSQL) SMALLSERIAL, SERIAL, BIGSERIAL - то же самое
________________________________________________________
UPDATE - для редактирования существующих данных в таблице
пример 
UPDATE FamilyMembers
SET member_name = "Andie Anthony"
WHERE member_name = "Andie Quincey";
________________________________________________________
DELETE и TRUNCATE - для удаления записей из таблицы
пример
DELETE FROM имя_таблицы
[WHERE условие_отбора_записей];
Если условие отбора записей WHERE отсутствует, то будут удалены все записи указанной таблицы.
_______________________________________________________
Функции:
(агрегатные)
SUM(поле_таблицы) -	Возвращает сумму значений
AVG(поле_таблицы) -	Возвращает среднее значение
COUNT(поле_таблицы) -      Возвращает количество записей
MIN(поле_таблицы) -	Возвращает минимальное значение
MAX(поле_таблицы) -	Возвращает максимальное значение
TIMESTAMPDIFF(second, time_out, time_in) - разница во времени в секундах между двумя датами. в конце можно использовать NOW()
агрегатные функции (SUM, AVG, COUNT, MAX, MIN) должны быть также указаны внутри SELECT с указанием столбца, к которому такая функция применяется.
________________________________________________________
IF - задаёт условие
IF(условное_выражение, значение_1, значение_2);
IFNULL - возвращает NULL, если во всех аргументах всё по нулям
SELECT IFNULL("SQL Academy", "Альтернатива SQL Academy") AS sql_trainer;
NULLIF - возвращает NULL, если аргументы различаются
Функции CEIL, FLOOR направлены на то, чтобы округлять число к ближайшему целому числу в большую и в меньшую сторону соответственно.
ROUND - стандартное округление в целому числу (если 0.5 то 1. если 0.4 то 0)
если добавить ROUND(1691.7,-2), то округлит в большую сторону на указанный порядок)
TRUNCATE(69.7979,1) просто отбрасывает ненужные цифры (к-во указано во 2 аргументе)
SIGN(-69) возвращает значение -1, если число отрицательно, 0, если число нулевое и 1, если число положительное.
Символы и структуры	Чему соответствует                                                                
*	0 или более экземпляров предшествующей строки
+	1 или более экземпляров предшествующих строк
.	Любой одиночный символ                      
?	0 или 1 экземпляр предшествующей строки
^	Соответствует началу строки                     
$	Соответствует окончанию строки                      
[abc]	Любой символ, указанный в квадратных скобках
[^abc]	Любой символ, не указанный в квадратных скобках
[A-Z], [А-Я]	Соответствует любой заглавной букве латинского и кириллического алфавита соответственно
[a-z], [а-я]	Соответствует любой строчной букве латинского и кириллического алфавита соответственно
[0-9]	Соответствует любой цифре                                                   
p1|p2|p3	Соответствует любому из паттернов p1 или p2 или p3 
{n}	n экземпляров предыдущей строки
________________________________________________________
Обобщённое табличное выражение CTE (Common Table Expressions) - это временный результирующий набор данных, к которому можно обращаться в последующих запросах.
Конструкция WITH [...........] AS позволяет создавать временные таблицы, в которых можно работать, не загрязняя глобальное пространство имён:
WITH RECURSIVE название_cte (столбец_1, столбец_2, ...) AS (
    -- Начальный набор данных
    SELECT столбец_1, столбец_2, ...
    FROM таблица
    WHERE условие
    UNION ALL
    -- Рекурсивная часть
    SELECT столбец_1, столбец_2, ...
    FROM название_cte
    INNER JOIN таблица ON название_cte.столбец = таблица.столбец
    WHERE условие
)
SELECT * FROM название_cte;
